# AI-Assisted Development Guidelines

## AI Tool Integration

### 1. **Supported AI Tools**
- **v0.dev**: React component generation
- **Bolt.new**: Full-stack development environment
- **Lovable**: AI-assisted application building
- **Replit**: Collaborative coding platform

### 2. **Prompt Structure**
When creating prompts for AI tools, follow this structure:

\`\`\`typescript
// Tool-specific prompt template
const prompt = {
  content: "Create a [component/feature] that [specific requirements]",
  tooltips: [
    {
      text: "key concept",
      explanation: "Explanation for beginners",
      highlightColor: "bg-yellow-100"
    }
  ]
}
\`\`\`

### 3. **Component Patterns for AI**
\`\`\`tsx
// AI-friendly component structure
interface ComponentProps {
  // Clear, descriptive prop names
  title: string
  description?: string
  variant?: 'default' | 'outline' | 'ghost'
  size?: 'sm' | 'md' | 'lg'
}

export function ComponentName({ 
  title, 
  description, 
  variant = 'default',
  size = 'md',
  ...props 
}: ComponentProps) {
  // Clear, well-documented logic
  const variantClasses = {
    default: 'bg-primary text-primary-foreground',
    outline: 'border border-input bg-background',
    ghost: 'hover:bg-accent hover:text-accent-foreground'
  }

  return (
    <div 
      className={cn(
        'base-classes',
        variantClasses[variant],
        sizeClasses[size],
        props.className
      )}
      {...props}
    >
      {/* Clear, semantic structure */}
    </div>
  )
}
\`\`\`

## Code Documentation for AI

### 1. **Component Comments**
\`\`\`tsx
/**
 * ComponentName - Brief description
 * 
 * Features:
 * - Feature 1: Description
 * - Feature 2: Description
 * 
 * Usage:
 * <ComponentName title="Example" variant="outline" />
 * 
 * AI Notes:
 * - This component follows the [pattern] for consistency
 * - Uses [specific library] for [specific functionality]
 * - Designed for [specific use case]
 */
\`\`\`

### 2. **Function Documentation**
\`\`\`tsx
/**
 * FunctionName - Clear description of what it does
 * 
 * @param param1 - Description of parameter
 * @param param2 - Description of parameter
 * @returns Description of return value
 * 
 * Example:
 * const result = functionName('example', { key: 'value' })
 * 
 * AI Context:
 * - This function is used for [specific purpose]
 * - Follows [specific pattern] for consistency
 * - Handles [specific edge cases]
 */
\`\`\`

## AI-Optimized Code Structure

### 1. **Clear Naming Conventions**
\`\`\`tsx
// Good: Clear, descriptive names
const handleUserSubmission = (formData: FormData) => { }
const isFormValid = (data: FormData) => { }
const formatUserInput = (input: string) => { }

// Avoid: Vague or abbreviated names
const handle = (data: any) => { }
const isValid = (d: any) => { }
const format = (i: string) => { }
\`\`\`

### 2. **Consistent Patterns**
\`\`\`tsx
// Use consistent patterns for similar functionality
const useDataFetching = <T>(url: string) => {
  const [data, setData] = useState<T | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    // Consistent error handling
    // Consistent loading states
    // Consistent data transformation
  }, [url])

  return { data, loading, error }
}
\`\`\`

### 3. **Type Safety for AI**
\`\`\`tsx
// Comprehensive type definitions
interface Project {
  id: string
  title: string
  description: string
  difficulty: 'beginner' | 'intermediate' | 'advanced'
  tools: string[]
  phases: ProjectPhase[]
}

interface ProjectPhase {
  id: string
  title: string
  description: string
  prompts: Record<string, Prompt>
}

interface Prompt {
  content: string
  tooltips?: Tooltip[]
}

interface Tooltip {
  text: string
  explanation: string
  highlightColor: string
}
\`\`\`

## AI Tool Integration Patterns

### 1. **URL Generation**
\`\`\`tsx
const getToolUrl = (tool: Tool, prompt: Prompt) => {
  switch (tool.id) {
    case 'v0':
      return `${tool.linkPattern}?q=${encodeURIComponent(prompt.content)}`
    case 'bolt':
      return `${tool.linkPattern}/new?prompt=${encodeURIComponent(prompt.content)}`
    default:
      return tool.linkPattern
  }
}
\`\`\`

### 2. **Prompt Display**
\`\`\`tsx
const PromptDisplay = ({ prompt, tool }: { prompt: Prompt, tool: Tool }) => {
  return (
    <div className="space-y-4">
      <div className="bg-muted p-4 rounded-lg">
        <pre className="whitespace-pre-wrap text-sm">
          {prompt.content}
        </pre>
      </div>
      
      {prompt.tooltips?.map((tooltip, index) => (
        <div key={index} className="text-sm text-muted-foreground">
          <span className={tooltip.highlightColor}>
            {tooltip.text}
          </span>
          : {tooltip.explanation}
        </div>
      ))}
    </div>
  )
}
\`\`\`

## Best Practices for AI Development

### 1. **Code Clarity**
- Write self-documenting code
- Use descriptive variable and function names
- Include helpful comments for complex logic
- Structure code for easy understanding

### 2. **Consistency**
- Follow established patterns
- Use consistent naming conventions
- Maintain consistent file structure
- Apply consistent styling patterns

### 3. **Error Handling**
\`\`\`tsx
// Comprehensive error handling
const handleError = (error: unknown) => {
  if (error instanceof Error) {
    console.error('Specific error:', error.message)
    // Handle specific error types
  } else {
    console.error('Unknown error:', error)
    // Handle unknown errors
  }
}
\`\`\`

### 4. **Testing Considerations**
\`\`\`tsx
// AI-friendly test structure
describe('ComponentName', () => {
  it('should render with basic props', () => {
    // Clear test descriptions
    // Simple, focused tests
    // Easy to understand assertions
  })

  it('should handle edge cases', () => {
    // Test edge cases explicitly
    // Document why edge cases matter
  })
})
\`\`\`

## AI Context Guidelines

### 1. **File Organization**
- Keep related functionality together
- Use clear file and folder names
- Maintain consistent import patterns
- Document file purposes

### 2. **Component Hierarchy**
- Clear parent-child relationships
- Consistent prop drilling patterns
- Well-defined component boundaries
- Logical component composition

### 3. **State Management**
- Use React hooks consistently
- Keep state as local as possible
- Document state dependencies
- Use clear state update patterns

Remember: The goal is to make code that's easy for both humans and AI to understand, modify, and extend.
description:
globs:
alwaysApply: false
---
